@page "/fetchdata"
@using Atlas.Reporting.UI.Shared.DTOs

@inject HttpClient HttpClient

<h3>Filter ReportDTo</h3>

<div class="form-group">
    <RadzenFormField Text="Vendor Code:" Style="width: 100%;">
        <RadzenTextBox @bind-Value="@vendorCode" Style="width: 100%;"/>
    </RadzenFormField>
</div>

<div class="form-group">
    <label for="startDatePicker">start Date:</label>
    <RadzenDatePicker TValue="DateTime?" @bind-Value=@startDate Change="@(args => startDate =  args)"/>
</div>

<div class="form-group">
    <label for="endDatePicker">end Date:</label>
    <RadzenDatePicker TValue="DateTime?" @bind-Value="@endDate" Change="@(args => endDate =  args)"/>
</div>

<div class="form-group">
    <RadzenCheckBox @bind-Value=@snappIsActive Name="snappIsActive"/>
    <RadzenLabel Text="Snapp Is Active:" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;"/>

</div>

<div class="form-group">
    <RadzenCheckBox @bind-Value=@isActive Name="isActive"/>
    <RadzenLabel Text="IsActive:" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;"/>
</div>

<div class="form-group">
    <RadzenFormField Text="Brand ID:" Style="width: 100%;">
        <RadzenTextBox @bind-Value="@brandId" Style="width: 100%;"/>
    </RadzenFormField>
</div>

<button class="btn btn-primary" @onclick="ViewReport">View Report</button>

@if (ReportDTos != null)
{
    <RadzenDataGrid Data="@ReportDTos" TItem="ReportDto" GridLines="@GridLines">
        <Columns>
            <RadzenDataGridColumn TItem="ReportDto" Property="Raw" Title="Raw"/>
            <RadzenDataGridColumn TItem="ReportDto" Property="BrandId" Title="Brand ID"/>
            <RadzenDataGridColumn TItem="ReportDto" Property="ClientId" Title="Client ID"/>
            <RadzenDataGridColumn TItem="ReportDto" Property="VendorName" Title="VendorName"/>
            <RadzenDataGridColumn TItem="ReportDto" Property="LastPing" Title="LastPing"/>
            <RadzenDataGridColumn TItem="ReportDto" Property="Total" Title="Total"/>
            <RadzenDataGridColumn TItem="ReportDto" Property="SnappFood" Title="SnappFood"/>
            <RadzenDataGridColumn TItem="ReportDto" Property="Salon" Title="Salon"/>
            <RadzenDataGridColumn TItem="ReportDto" Property="SnappIsActive" Title="SnappIsActive"/>
            <RadzenDataGridColumn TItem="ReportDto" Property="IsActive" Title="IsActive"/>
        </Columns>
    </RadzenDataGrid>
}

@code {
    DataGridGridLines GridLines = DataGridGridLines.Default;
    private string vendorCode = "";
    private DateTime? startDate = DateTime.Now;
    private DateTime? endDate = DateTime.Now;
    private bool snappIsActive;
    private bool isActive = true;
    private string brandId = "";

    private List<ReportDto> ReportDTos;
    private string filter;

    private async Task ViewReport()
    {
        try
        {
            var response = await HttpClient.GetAsync($"/api/Rport?vendorCode={vendorCode}&startDate={startDate}&endDate={endDate}&snappIsActive={snappIsActive}&brandId={brandId}");
            if (response.IsSuccessStatusCode)
            {
                var reportDtoList = await response.Content.ReadFromJsonAsync<List<ReportDto>>();
                ReportDTos = reportDtoList;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"Request failed: {response.StatusCode}, {errorContent}");
            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

}